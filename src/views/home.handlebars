<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
  <title>CaCuLocation</title>

  <link rel="stylesheet" href="/css/common.css">

  {{!-- Mapbox links --}}
  <script src='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
  <link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />

  {{!-- Bootstrap links --}}
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
    integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
    crossorigin="anonymous"></script>
</head>

<body>

  {{!-- Geocoder plugin for mapbox --}}
  <script
    src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.min.js"></script>
  <link rel="stylesheet"
    href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css"
    type="text/css" />
  <!-- Promise polyfill script required to use Mapbox GL Geocoder in IE 11 -->
  <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>

  <nav class="navbar navbar-dark bg-dark">
    <div>
      <a class="navbar-brand" href="/">
        <img src="/img/cacboi.png" width="30" height="30" class="d-inline-block align-top" alt="" loading="lazy">
        CaCuLocation
      {{#if user}}
        <a href="/dashboard" class="nav-item linker">// Hi, {{ user.username }}</a>
      {{/if}}
    </a>
    </div>
    
    <div>
      {{#if user}}
      <a class="btn btn-primary" href="/user/logout">Log Out</a>
      {{else}}
      <a class="btn btn-primary" href="/user/login">Log In</a>
      {{/if}}
      <button type="button" class="btn btn-info" data-toggle="modal" data-target="#exampleModal">
        ?
      </button>
    </div>

  </nav>

  <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">What is CacuLocation</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          WRITE ABOUT THE APP HERE OK
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <div id='map'></div>

  <script>
    //sets up map
    const token = 'pk.eyJ1IjoiYXNoLWVsaWVlbiIsImEiOiJja2c4d2dleWswN3B3MzJxeDB0ZXN4ZTJkIn0.OqM5qHeqtucHuWY9NiKp5Q';
    mapboxgl.accessToken = token;
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      //center on geolocation?
      center: [135.821931323998, -26.01181789972918], // starting position [lng, lat]
      zoom: 3 // starting zoom
    });

    //Adds geocoder search bar to the map
    map.addControl(
      new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl
      })
    );


    //Popup of location on click
    let popup = new mapboxgl.Popup()

    map.on('click', async (e) => {
      console.log(e)
      var coords = e.lngLat

      let raw = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${coords.lng},${coords.lat}.json?access_token=${token}`)
        .then(resp => resp.json())
      let address = raw.features[0].place_name

      popup
        .setLngLat(coords)
        .setHTML(`
        <strong>${address}</strong>
        <hr>
        <a href="http://localhost:3007/new?lat=${coords.lat}&long=${coords.lng}&address=${address}">Add Pin</a>
        `)
        .addTo(map)
    })

    //Dynamically render markers
    map.on('load', () => {
      let that = {
        coords: {
          lat: 100,
          long: 200
        }
      }
      map.addSource('places', {
        'type': 'geojson',
        'data': {
          'type': 'FeatureCollection',
          'features': [
            {{#if pins }}
              {{#each pins }}
                {
        'type': 'Feature',
        'properties': {
          'description': `
                      <h3>{{ this.type }}</h3>
                      <em>{{ this.address }}</em><br>
                      <strong>{{ this.user.username }}</strong>
                      <hr>
                      <strong>{{ this.health }}</strong>
                      <p>{{ this.description }}</p>
                      <hr>
                      <a href="http://localhost:3007/pin/{{this.id}}">Edit</a>
                      `,
          'icon': 'park'
        },
        'geometry': {
          'type': 'Point',
          'coordinates': [{{ this.long }}, {{ this.lat }}]
                  }
                },
      {{/ each }}
      {{/if }}
      {}
          ]
        }
      })

    map.addLayer({
      'id': 'places',
      'type': 'symbol',
      'source': 'places',
      'layout': {
        'icon-image': '{icon}-15',
        'icon-allow-overlap': true
      }
    });

    map.on('click', 'places', function (e) {
      var coordinates = e.features[0].geometry.coordinates.slice();
      var description = e.features[0].properties.description;

      // Ensure that if the map is zoomed out such that multiple
      // copies of the feature are visible, the popup appears
      // over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      popup.remove()

      new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(description)
        .addTo(map);

      setTimeout(() => {
        popup.remove()
      }, 500)
    });

    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', function () {
      map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'places', function () {
      map.getCanvas().style.cursor = '';
    });

    })

  </script>

</body>

</html>